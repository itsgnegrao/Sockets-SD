package Parte4;/** * TCPServer: Servidor para conexao TCP com Threads * Descricao: Recebe uma conexao, cria uma thread, recebe uma mensagem e finaliza a conexao */import java.net.*;import java.io.*;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.logging.Level;import java.util.logging.Logger;public class TCPServer {       public static ArrayList<TaskThread> Clientes;        public static void main (String args[]) {       startServer();    } //main        public static void startServer(){    (new Thread() {        @Override        public void run() {            try{                Clientes = new ArrayList<TaskThread>();                int serverPort = 7896; // porta do servidor                /* cria um socket e mapeia a porta para aguardar conexao */                ServerSocket listenSocket = new ServerSocket(serverPort);                while(true) {                    System.out.println ("Servidor aguardando conexao ...");                    /* aguarda conexoes */                    Socket clientSocket = listenSocket.accept();                    System.out.println ("Cliente conectado ... Criando thread ...");                    /* cria um thread para atender a conexao */                    TaskThread c = new TaskThread(clientSocket);                    Clientes.add(c);                } //while            } catch(IOException e) {                System.out.println("Listen socket:"+e.getMessage());            } //catch                }        }    ).start();//Thread   }//metodo       public static void removeClient(TaskThread cli){       Clientes.remove(cli);          }} //class/** * Classe TaskThread: Thread responsavel pela comunicacao * Descricao: Rebebe um socket, cria os objetos de leitura e escrita e aguarda msgs clientes  */class TaskThread extends Thread {    DataInputStream in;    DataOutputStream out;    Socket clientSocket;        public TaskThread (Socket aClientSocket) {        try {            clientSocket = aClientSocket;            in = new DataInputStream( clientSocket.getInputStream());            out =new DataOutputStream( clientSocket.getOutputStream());            this.start();  /* inicializa a thread */        } catch(IOException e) {	    System.out.println("Connection:"+e.getMessage());	} //catch    } //construtor        /* metodo executado ao iniciar a thread - start() */    public void run(){        try {        int i;        String data = "";        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));		while(true){			                 	                     data = in.readUTF();   /* aguarda o recebimento de dados */                     String parse = data.replaceAll("\\[.*\\]\\: ", "");        	    System.out.println (data);                                                             /*TIME Retorna a hora do sistema como uma String UTF no formato HH:MM:SS + PM/AM*/                    if(parse.equals("TIME")){                        Date dateToFormat = new Date();                        SimpleDateFormat dateFormatExpression = new SimpleDateFormat("hh:mm:ss a"+"\n");                        String formattedDate = dateFormatExpression.format(dateToFormat);                        out.writeUTF(formattedDate);                    }                                        /*DATE Retorna a data do sistema como uma String UTF no formato DD/MM/AAAA*/                    else if(parse.equals("DATA")){                        Date dateToFormat = new Date();                        SimpleDateFormat dateFormatExpression = new SimpleDateFormat("dd/MM/yyyy"+"\n");                        String formattedDate = dateFormatExpression.format(dateToFormat);                        out.writeUTF(formattedDate);                    }                                        /*EXIT Finaliza a conex√£o*/                    else if(parse.equals("EXIT")){                        TCPServer.removeClient(this);                        this.interrupt();                        out.writeUTF("EXIT");                    }                                        else{                        out.writeUTF(data);                    }                }                } catch (EOFException e){	    System.out.println("EOF: "+e.getMessage());        } catch(IOException e) {	    System.out.println("leitura: "+e.getMessage());        } //catch	    } //run} //class